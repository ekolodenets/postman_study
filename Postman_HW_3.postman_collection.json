{
	"info": {
		"_postman_id": "dbb97a47-c44a-4627-bf15-274047b0bf17",
		"name": "Postman_HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1 login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"pm.environment.set('token', jsonData.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "logint",
							"value": "",
							"description": "Evgeny",
							"type": "text"
						},
						{
							"key": "password",
							"value": "",
							"description": "test",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2 user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2) http://162.55.220.72:5005/user_info\r",
							"// req. (RAW JSON)\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// resp.\r",
							"// {'start_qa_salary':salary,\r",
							"//  'qa_salary_after_6_months': salary * 2,\r",
							"//  'qa_salary_after_12_months': salary * 2.9,\r",
							"//  'person': {'u_name':[user_name, salary, age],\r",
							"//                                 'u_age':age,\r",
							"//                                 'u_salary_1.5_year': salary * 4}\r",
							"//                                 }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"const schema = {\r",
							"    \"person\": {\r",
							"        \"u_age\": 35,\r",
							"        \"u_name\": [\r",
							"            \"Evgeny\",\r",
							"            1500,\r",
							"            35\r",
							"        ],\r",
							"        \"u_salary_1_5_year\": 6000\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": 4350.0,\r",
							"    \"qa_salary_after_6_months\": 3000,\r",
							"    \"start_qa_salary\": 1500\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var jsonData = pm.response.json()\r",
							"var reqData = JSON.parse(request.data).salary\r",
							"\r",
							"pm.test(jsonData.qa_salary_after_12_months + \"$ == salary*2.9 (\" + reqData+'$)', function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData*2.9)\r",
							"})\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"var eighteenmonth = jsonData.person.u_salary_1_5_year\r",
							"pm.environment.set('u_salary_1.5_year', eighteenmonth);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"age\": 35,\r\n\"salary\": 1500,\r\n\"name\": \"Evgeny\",\r\n\"auth_token\":\"{{token}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3 new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3) http://162.55.220.72:5005/new_data\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"const schema = {\r",
							"    \"age\": 35,\r",
							"    \"name\": \"Evgeny\",\r",
							"    \"salary\": [\r",
							"        6000,\r",
							"        \"12000\",\r",
							"        \"18000\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var jsonData = pm.response.json()\r",
							"var reqData = +request.data.salary\r",
							"\r",
							"\r",
							"pm.test(+jsonData.salary[1]+\" is salary *2 (\" + reqData+')', function(){\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(reqData*2)\r",
							"})\r",
							"pm.test(+jsonData.salary[2]+\" is salary *3 (\" + reqData+')', function(){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(reqData*3)\r",
							"})\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(jsonData.salary[1]+\" is more then \"+reqData, function(){\r",
							"    pm.expect(+jsonData.salary[1]).to.be.above(reqData)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1.5_year}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4 test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// weight: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age': age,\r",
							"//  'daily_food':weight * 0.012,\r",
							"//  'daily_sleep': weight * 2.5}\r",
							"\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"const schema = {\r",
							"    \"age\": 35,\r",
							"    \"daily_food\": 1.2,\r",
							"    \"daily_sleep\": 250.0,\r",
							"    \"name\": \"Evgeny\"\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var jsonData = pm.response.json()\r",
							"var food = +pm.request.body.formdata.toJSON()[2].value\r",
							"var sleep = +pm.request.body.formdata.toJSON()[2].value\r",
							"\r",
							"pm.test('food ' + jsonData.daily_food + ' is equal to weight*0.012', function(){\r",
							"    pm.expect(jsonData.daily_food).to.eql(food*0.012)\r",
							"})\r",
							"\r",
							"pm.test('sleep ' + jsonData.daily_sleep + ' is equal to weight*2.5', function(){\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(food*2.5)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "100",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5 get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5) http://162.55.220.72:5005/get_test_user\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age':age,\r",
							"//  'salary': salary,\r",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"//  'u_salary_1.5_year': salary * 4}\r",
							"//   }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"const schema = {\r",
							"    \"age\": \"35\",\r",
							"    \"family\": {\r",
							"        \"children\": [\r",
							"            [\r",
							"                \"Alex\",\r",
							"                24\r",
							"            ],\r",
							"            [\r",
							"                \"Kate\",\r",
							"                12\r",
							"            ]\r",
							"        ],\r",
							"        \"u_salary_1_5_year\": 24000\r",
							"    },\r",
							"    \"name\": \"Evgeny\",\r",
							"    \"salary\": 6000\r",
							"}\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var jsonData = pm.response.json()\r",
							"pm.test('name = значению переменной name из окружения', function(){\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get('name'))\r",
							"})\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test('age = значению переменной age из окружения', function(){\r",
							"    pm.expect(jsonData.age).to.eql(pm.environment.get('age').toString())\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1.5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6 currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6) http://162.55.220.72:5005/currency\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"\r",
							"// Resp. Передаётся список массив объектов.\r",
							"// [\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// …\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// ]\r",
							"// Тесты:\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"// iteration with FOR\r",
							"// let list_id = []\r",
							"// for (i in jsonData){\r",
							"//     list_id.push(jsonData[i].Cur_ID);}\r",
							"\r",
							"// iteration with MAP function\r",
							"const list_id = jsonData.map(tool => tool.Cur_ID)\r",
							"// const list_id = [451,453,1,3,451]\r",
							"// pm.environment.set('list_id_demo', list_id);\r",
							"\r",
							"// set env value for one curr\r",
							"pm.environment.set('cur_id', list_id[_.random(list_id.length-1)]);\r",
							"\r",
							"// set env value for list of curr\r",
							"pm.environment.set('list_id', list_id)\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7 curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 7) http://162.55.220.72:5005/curr_byn\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"// curr_code: int\r",
							"\r",
							"// Resp.\r",
							"// {\r",
							"    // \"Cur_Abbreviation\": str\r",
							"    // \"Cur_ID\": int,\r",
							"    // \"Cur_Name\": str,\r",
							"    // \"Cur_OfficialRate\": float,\r",
							"    // \"Cur_Scale\": int,\r",
							"    // \"Date\": str\r",
							"// }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"const   schema = {\r",
							"    \"Cur_Abbreviation\": 'str',\r",
							"    \"Cur_ID\": 'int',\r",
							"    \"Cur_Name\": 'str',\r",
							"    \"Cur_OfficialRate\": 'float',\r",
							"    \"Cur_Scale\": 'int',\r",
							"    \"Date\": 'str'\r",
							"}\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{cur_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3stars",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var env = pm.environment.get('list_id');\r",
							"for (i in env){\r",
							"    const postRequest = {\r",
							"        url: 'http://162.55.220.72:5005/curr_byn',\r",
							"        method: 'POST',\r",
							"        body: {mode: 'formdata',\r",
							"        formdata: [ {key: 'auth_token', value: '/s34lfgbj/None/jjd909/56653kjkWpqc3387370954evny'},\r",
							"                    {key: 'curr_code', value: env[i]}]}};\r",
							"\r",
							"    pm.sendRequest(postRequest, (error, response) => {\r",
							"        if (response.code != 500 && response.json().Cur_OfficialRate){\r",
							"                Rate = response.json().Cur_OfficialRate\r",
							"                CAbbr = response.json().Cur_Abbreviation\r",
							"                CID = response.json().Cur_ID\r",
							"                CName = response.json().Cur_Name\r",
							"                CScale = response.json().Cur_Scale\r",
							"                CDate = response.json().Date\r",
							"                console.log(    \"Знак:\", CAbbr,\r",
							"                                \"ID:\", CID,\r",
							"                                \"Название:\", CName,\r",
							"                                \"Курс:\", Rate,\r",
							"                                \"Соотношение:\", CScale,\r",
							"                                \"Дата:\",CDate)}});}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "curr_code",
							"value": "{{cur_id}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "usernames",
			"value": ""
		}
	]
}